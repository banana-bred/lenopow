#!/usr/bin/env zsh

# Maintainer: Helmut Stult <helmut[at]manjaro[dot]org>

# Based on the code from:
# Lenovsky    <lenovsky@pm.me>

local VERSION=1.2.0
local BATTERY_PROTECTION='/sys/bus/platform/drivers/ideapad_acpi/VPC2004:00/conservation_mode'
local BATTERY_PROTECTION_ON=1
local BATTERY_PROTECTION_OFF=0
local BACKLIGHT_DIR="/sys/class/backlight/$(ls /sys/class/backlight)"
local BRIGHTNESS="${BACKLIGHT_DIR}/brightness"
local BRIGHTNESS_MIN=0
local BRIGHTNESS_MAX=$(cat "${BACKLIGHT_DIR}"/max_brightness)
local PROGRAM="${(%):-%x}"

usage() {
    # Prints general usage of the script.

    cat <<EOF
    usage: ${PROGRAM}  [operation]
    operations:
    -h               Show this message.
    -v               Show script version.
    -s               Show battery protection status and current brightness.
    -e               Enable battery protection (charge level 55-60%).
    -d               Disable battery protection (charge level 100%).
    -b <brightness>  Set backlight brightness, defaults to max value
EOF
}

die() {
  # Raises an error message and exits.
  # param: $1: $error_message: error message

  local exit_code=1
  local error_message="$1"

	echo "${PROGRAM}: ${error_message}" 1>&2

  exit "${exit_code}"
}

brightness_show() {
	# -- Shows backlight brightness setting

	local brit
	brit="$(cat "${BRIGHTNESS}")" && echo "Backlight brightness set at "${brit}"/"${BRIGHTNESS_MAX} || echo "error determining brightness"

}

brightness_store() {
	# -- Stores value in $BRIGHTNESS
  # -- param: $1: $store: values for $BRIGHTNESS, where:

	local store="$1"
	local bright="$(cat "${BRIGHTNESS}")"

	[[ "${store}" -ge "${bright}" ]] &&
		( [[ "${bright}" -eq "${BRIGHTNESS_MAX}" ]] && echo "Brightness already set to max" ||
			( [[ "${store}"  -eq "${bright} " ]] && echo "Brightness already set to ${store}/${BRIGHTNESS_MAX}" ) ) && exit 0

	if [[ "${store}" -ge "${BRIGHTNESS_MAX}" ]] ; then
		bright=${BRIGHTNESS_MAX}
	elif [[ "${store}" -le "${BRIGHTNESS_MIN}" ]] ; then
		bright=${BRIGHTNESS_MIN}
	elif [[ "${store}" -gt "${BRIGHTNESS_MIN}" && "${store}" -lt "${BRIGHTNESS_MAX}" ]] ; then
		bright=${store}
	else
		die "Brightness '${bright}' could not be set in 'brightness_store()'"
	fi

	[[ "${bright}" -eq "${BRIGHTNESS_MAX}" ]] && echo "Setting brightness to max" && sudo zsh -c "echo '${bright}' > '${BRIGHTNESS}'" ||
		echo "Setting brightness to ${bright}/${BRIGHTNESS_MAX}" && sudo zsh -c "echo '${bright}' > '${BRIGHTNESS}'"

}

battery_protection_show() {
  # Shows battery protection status based on $BATTERY_PROTECTION value.

	local batt
  batt="$(cat "${BATTERY_PROTECTION}")"

  [[ "${batt}" -eq "${BATTERY_PROTECTION_ON}" ]]  && echo "Battery protection: ENABLED"  ||
		( [[ "${batt}" -eq "${BATTERY_PROTECTION_OFF}" ]] && echo "Battery protection: DISABLED" ) ||
		( echo "Battery protection: UNKNOWN" )

}

battery_protection_store() {
  # Stores value in $BATTERY_PROTECTION
  # param: $1: $store: values for $BATTERY_PROTECTION, where:
  #   * 1 -> enabled
  #	* 0 -> disabled

  local store="$1"

  if [[ "${store}" -eq "${BATTERY_PROTECTION_ON}" ]]; then
      echo 'Battery protection enabled (charge level 55-60%)'
      sudo zsh -c "echo '${store}' >'${BATTERY_PROTECTION}'"
  elif [[ "${store}" -eq "${BATTERY_PROTECTION_OFF}" ]]; then
      echo 'Battery protection disabled (charge level 100%)'
      sudo zsh -c "echo '${store}' >'${BATTERY_PROTECTION}'"
  else
      die "Invalid value encountered in 'battery_protection_store()'"
  fi

}

main() {
  # Parses command-line arguments in order to perform the stuff.
  # param: $key: keys to the stuff

	local bright="${BRIGHTNESS_MAX}"

  while getopts ":b:hvsed" key ; do

		case "${key}" in
		h)
				usage
				exit 0
				;;
		v)
				echo "${PROGRAM} v${VERSION}"
				;;
		s)
				brightness_show
				battery_protection_show
				;;
		b)
				bright="${OPTARG}"
				brightness_store "${bright}"
				exit 0
				;;
		e)
				battery_protection_store "${BATTERY_PROTECTION_ON}"
				exit 0
				;;
		d)
				battery_protection_store "${BATTERY_PROTECTION_OFF}"
				exit 0
				;;
		:)
				[[ "${OPTARG}" -eq "b" ]] && brightness_store "${bright}"
				;;
		\?)
				die "Invaild operation '${key}'. See '${PROGRAM} -h' for help." 1>&2
				exit 1
				;;
		esac

	done

	[[ -z "${key}" ]] && die "No operation specified. See '${PROGRAM} -h' for help." 1>&2 && exit 1

}

main "$@"
